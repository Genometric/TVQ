(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{74:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),o=(n(0),n(83)),i={title:"About"},c={unversionedId:"webservice/about",id:"webservice/about",isDocsHomePage:!1,title:"About",description:"Webservice collects tool metadata and search Scopus for citation",source:"@site/docs/webservice/about.mdx",slug:"/webservice/about",permalink:"/TVQ/docs/webservice/about",editUrl:"https://github.com/genometric/tvq/edit/docs/docs/webservice/about.mdx",version:"current",sidebar:"someSidebar",previous:{title:"About",permalink:"/TVQ/docs/analytics/about"},next:{title:"Repositories",permalink:"/TVQ/docs/webservice/repo"}},s=[],b={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Webservice collects tool metadata and search Scopus for citation\ninformation. It also generates descriptive statistics about the\ntools and their citation count, and exports data to be used as\ninput for the analytical scripts."),Object(o.b)("p",null,"Webservice is written in an ASP.NET web application, written\nin C# .NET Core. Currently, the only way to interact with the\nservice is via it's API; its Swagger documentation is available\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://genometric.github.io/TVQ/api"}),"at this link"),".\nThe webservice stores its data on a database; it uses\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/ef/core/get-started/overview/first-app?tabs=netcore-cli"}),"Entity Framework Core"),"\nas its object\u2013relational mapping (ORM), hence it can\nuse different database system if its\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Genometric/TVQ/blob/b241ba75637fbc7721eb1fe2cf89a0aec749184d/webservice/WebService/appsettings.json#L1-L4"}),"connection string"),"\nis set correctly. By default it runs on SQL Server."),Object(o.b)("p",null,"Webservice is containerized and comes with a\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Genometric/TVQ/blob/master/docker-compose.yml"}),Object(o.b)("inlineCode",{parentName:"a"},"docker-compose")),"\nand ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Genometric/TVQ/blob/master/webservice/WebService/Dockerfile"}),Object(o.b)("inlineCode",{parentName:"a"},"Dockerfile")),".\nThe ",Object(o.b)("inlineCode",{parentName:"p"},"docker-compose")," starts Webservice and SQL Server,\nand establishes a connection between them."),Object(o.b)("p",null,"To start Webservice, run the following command at the\nroot of the project path:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"$ docker-compose up\n")),Object(o.b)("p",null,"The service will be listening on port ",Object(o.b)("inlineCode",{parentName:"p"},"8000"),". You can access\nits API at the following address:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"http://localhost:8000/api/v1/\n")),Object(o.b)("p",null,"The API is RESTful and comes with a Swagger documentation.\nYou can access the public instance at\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://genometric.github.io/TVQ/api"}),"this link"),", or,\nonce the Webservice is running, you may go to the following\naddress to access your local Swagger documentation:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"http://localhost:8000/swagger/index.html\n")),Object(o.b)("p",null,"Or you may access Swagger ",Object(o.b)("inlineCode",{parentName:"p"},"JSON")," or ",Object(o.b)("inlineCode",{parentName:"p"},"YAML")," description at:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"http://localhost:8000/swagger/v1/swagger.json\nhttp://localhost:8000/swagger/v1/swagger.yaml\n")),Object(o.b)("p",null,"Note that every crawling request you submit (e.g.,\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://genometric.github.io/TVQ/api/#/Publications/post_api_v1_Publications"}),Object(o.b)("inlineCode",{parentName:"a"},"POST LieratureCrawlingJob"))," or\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://genometric.github.io/TVQ/api/#/RepoCrawlingJobs/post_api_v1_RepoCrawlingJobs"}),Object(o.b)("inlineCode",{parentName:"a"},"POST RepoCrawlingJobs")),")\nwill be executed as a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Job_(computing)"}),Object(o.b)("inlineCode",{parentName:"a"},"job")),".\nTherefore, when you ",Object(o.b)("inlineCode",{parentName:"p"},"POST")," a request to these API endpoints, Webservice will respond\nwith the information of the job created (see the following example), and it will\nschedule and execute the job in background."),Object(o.b)("p",null,"Send a repository (Package management systems such as Bioconda and Bioconductor) crawling request:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),'curl -H "Content-Type: application/json" -X POST http://localhost:8000/api/v1/RepoCrawlingJobs -d "{Repository:{\\"ID\\":4}}"\n')),Object(o.b)("p",null,"which will respond with the created crawling job:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "ID": 1,\n    "RepositoryID": 4,\n    "Status": "Queued",\n    "UpdatedDate": "Friday, 27 November 2020 04:06:01",\n    "CreatedDate": "Friday, 27 November 2020 04:06:01",\n    "Repository": {\n        "ID": 4,\n        "Name": "Bioconda",\n        "URI": "https://github.com/VJalili/bioconda-recipes/archive/cheetah_template.zip",\n        "UpdatedDate": "Friday, 27 November 2020 03:35:56",\n        "CreatedDate": "Friday, 27 November 2020 03:35:56"\n    }\n}\n')),Object(o.b)("p",null,"You can get the status of all the submitted jobs sending a ",Object(o.b)("inlineCode",{parentName:"p"},"GET")," request\nto ",Object(o.b)("inlineCode",{parentName:"p"},"api/v1/RepoCrawlingJobs")," endpoint, which responds with a JSON object\nas the following."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'[\n    {\n        "ID": 1,\n        "RepositoryID": 4,\n        "Status": "Running",\n        "UpdatedDate": "Friday, 27 November 2020 04:06:02",\n        "CreatedDate": "Friday, 27 November 2020 04:06:01",\n        "Repository": {\n            "ID": 4,\n            "Name": "Bioconda",\n            "URI": "https://github.com/VJalili/bioconda-recipes/archive/cheetah_template.zip",\n            "UpdatedDate": "Friday, 27 November 2020 03:35:56",\n            "CreatedDate": "Friday, 27 November 2020 03:35:56"\n        }\n    }\n]\n')))}p.isMDXComponent=!0},83:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),l=p(n),d=a,m=l["".concat(i,".").concat(d)]||l[d]||u[d]||o;return n?r.a.createElement(m,c(c({ref:t},b),{},{components:n})):r.a.createElement(m,c({ref:t},b))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var b=2;b<o;b++)i[b]=n[b];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);