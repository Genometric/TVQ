(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{60:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),o=(n(0),n(83)),i={title:"Repositories"},c={unversionedId:"webservice/repo",id:"webservice/repo",isDocsHomePage:!1,title:"Repositories",description:"List Defined Repositories",source:"@site/docs/webservice/repo.mdx",slug:"/webservice/repo",permalink:"/TVQ/docs/webservice/repo",editUrl:"https://github.com/genometric/tvq/edit/docs/docs/webservice/repo.mdx",version:"current",sidebar:"someSidebar",previous:{title:"About",permalink:"/TVQ/docs/webservice/about"},next:{title:"About",permalink:"/TVQ/docs/offline_crawlers/about"}},s=[{value:"List Defined Repositories",id:"list-defined-repositories",children:[]},{value:"Tools in Repositories",id:"tools-in-repositories",children:[]}],u={rightToc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"list-defined-repositories"},"List Defined Repositories"),Object(o.b)("p",null,"You can get a list of defined repositories by sending\na GET request as the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"curl -X GET http://localhost:3030/api/v1/Repositories/\n")),Object(o.b)("p",null,"The API endpoint will return a JSON object containing\nthe defined repositories. For instance, the following\nare the list of the default repositories:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'[\n    {\n        "ID": 1,\n        "Name": "ToolShed",\n        "URI": "https://github.com/Genometric/TVQ/raw/master/data/toolshed/",\n        "UpdatedDate": "Sunday, 28 February 2021 16:18:19",\n        "CreatedDate": "Sunday, 28 February 2021 16:18:19",\n        "Statistics": {\n            "ID": 1,\n            "RepositoryID": 1,\n            "UpdatedDate": "Sunday, 28 February 2021 16:18:19",\n            "CreatedDate": "Sunday, 28 February 2021 16:18:19",\n            "Repository": null\n        }\n    },\n    {\n        "ID": 2,\n        "Name": "BioTools",\n        "URI": "https://github.com/bio-tools/content/archive/master.zip",\n        "UpdatedDate": "Sunday, 28 February 2021 16:18:19",\n        "CreatedDate": "Sunday, 28 February 2021 16:18:19",\n        "Statistics": {\n            "ID": 2,\n            "RepositoryID": 2,\n            "UpdatedDate": "Sunday, 28 February 2021 16:18:19",\n            "CreatedDate": "Sunday, 28 February 2021 16:18:19",\n            "Repository": null\n        }\n    },\n    {\n        "ID": 3,\n        "Name": "Bioconductor",\n        "URI": "https://github.com/Genometric/TVQ/raw/master/data/bioconductor/",\n        "UpdatedDate": "Sunday, 28 February 2021 16:18:19",\n        "CreatedDate": "Sunday, 28 February 2021 16:18:19",\n        "Statistics": {\n            "ID": 3,\n            "RepositoryID": 3,\n            "UpdatedDate": "Sunday, 28 February 2021 16:18:19",\n            "CreatedDate": "Sunday, 28 February 2021 16:18:19",\n            "Repository": null\n        }\n    },\n    {\n        "ID": 4,\n        "Name": "Bioconda",\n        "URI": "https://github.com/VJalili/bioconda-recipes/archive/cheetah_template.zip",\n        "UpdatedDate": "Sunday, 28 February 2021 16:18:19",\n        "CreatedDate": "Sunday, 28 February 2021 16:18:19",\n        "Statistics": {\n            "ID": 4,\n            "RepositoryID": 4,\n            "UpdatedDate": "Sunday, 28 February 2021 16:18:19",\n            "CreatedDate": "Sunday, 28 February 2021 16:18:19",\n            "Repository": null\n        }\n    }\n]\n')),Object(o.b)("h2",{id:"tools-in-repositories"},"Tools in Repositories"),Object(o.b)("p",null,"TVQ implements ",Object(o.b)("em",{parentName:"p"},"crawlers")," to collect information\nabout repositories. In order to invoke a crawler,\nsend a POST request as the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'curl -H "Content-Type: application/json" \\\n     -X POST http://localhost:8000/api/v1/RepoCrawlingJobs \\\n     -d "{Repository:{\\"ID\\":4}}"\n')),Object(o.b)("p",null,"This is a request to collect information about Bioconductor, and\nTVQ will respond with the respective crawling job it created:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "ID": 5,\n    "RepositoryID": 3,\n    "Status": "Queued",\n    "UpdatedDate": "Wednesday, 10 March 2021 20:35:23",\n    "CreatedDate": "Wednesday, 10 March 2021 20:35:23",\n    "Repository": {\n        "ID": 3,\n        "Name": "Bioconductor",\n        "URI": "https://github.com/Genometric/TVQ/raw/master/data/bioconductor/",\n        "UpdatedDate": "Sunday, 28 February 2021 16:18:19",\n        "CreatedDate": "Sunday, 28 February 2021 16:18:19"\n    }\n}\n')),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Status")," of the job can be either of the following:\n",Object(o.b)("inlineCode",{parentName:"p"},"{Queued, Running, Completed, Failed}"),"."),Object(o.b)("p",null,"To check the status of a cralwer, you may send\na GET request as the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"curl -X GET http://localhost:3030/api/v1/RepoCrawlingJobs/\n")),Object(o.b)("p",null,"which will respond with a JSON object containing all the\nsubmitted repository crawling jobs as the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'[\n    {\n        "ID": 1,\n        "RepositoryID": 1,\n        "Status": "Completed",\n        "UpdatedDate": "Sunday, 28 February 2021 20:43:55",\n        "CreatedDate": "Sunday, 28 February 2021 16:19:06",\n        "Repository": {\n            "ID": 1,\n            "Name": "ToolShed",\n            "URI": "https://github.com/Genometric/TVQ/raw/master/data/toolshed/",\n            "UpdatedDate": "Sunday, 28 February 2021 16:18:19",\n            "CreatedDate": "Sunday, 28 February 2021 16:18:19"\n        }\n    }\n]\n')))}p.isMDXComponent=!0},83:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return y}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),p=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(n),b=r,y=l["".concat(i,".").concat(b)]||l[b]||d[b]||o;return n?a.a.createElement(y,c(c({ref:t},u),{},{components:n})):a.a.createElement(y,c({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);