(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{72:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(3),o=n(7),a=(n(0),n(83)),i={title:"About"},s={unversionedId:"analytics/about",id:"analytics/about",isDocsHomePage:!1,title:"About",description:"These are scripts written in python to perform",source:"@site/docs/analytics/about.mdx",slug:"/analytics/about",permalink:"/TVQ/docs/analytics/about",editUrl:"https://github.com/genometric/tvq/edit/docs/docs/analytics/about.mdx",version:"current",sidebar:"someSidebar",previous:{title:"Quick Start",permalink:"/TVQ/docs/getting_started/quickstart"},next:{title:"About",permalink:"/TVQ/docs/webservice/about"}},c=[],l={rightToc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"These are scripts written in python to perform\nstatistical analysis on the citation data generated by\nWebservice. The scripts run multiple tests asserting\ndifferent hypothesises."),Object(a.b)("p",null,"To execute the tests, first setup your development\nenvironment:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"$ cd [TVQ CLONE PATH]/analytics\n$ virtualenv .venv\n$ source .venv/bin/activate\n# on Windows:\n# .\\.venv\\Scripts\\activate\n$ pip install -r requirements.txt\n")),Object(a.b)("p",null,"All tests are run automatically at the execution of\nthe following command."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"python ./lib/run.py ...\n")),Object(a.b)("p",null,"You may type the following to see the command help:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"python ./lib/run.py --help\nusage: run.py [-h] {exe-all,cluster,plot-cluster,t-test,growth-hist,gain-score,pubs-in-clusters,tool-pub,citation-dist} ...\n\nA command-line interface to the scripts implemented for analyzing the TVQ-generated citation data.\n\npositional arguments:\n  {exe-all,cluster,plot-cluster,t-test,growth-hist,gain-score,pubs-in-clusters,tool-pub,citation-dist}\n                        Commands\n    exe-all             Executes all the scripts in a predefined order.\n    cluster             Clusters publications in repositories stored in CSV files in given input path.\n    plot-cluster        Plot clusters and citation counts in quartiles.\n    t-test              Performs t-test on the citation count of publications.\n    growth-hist         Plots a histogram of the citation count growth.\n    gain-score          Plots gain score.\n    pubs-in-clusters    Plots publications in clusters.\n    tool-pub            Plots tools in publications.\n    citation-dist       Plots citations distribution.\n\noptional arguments:\n  -h, --help            show this help message and exit\n")),Object(a.b)("p",null,"To see the argument for each sub command you may use the ",Object(a.b)("inlineCode",{parentName:"p"},"--help")," argument; for instance:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"python ./lib/run.py exe-all --help\nusage: run.py exe-all [-h] [-c CLUSTER_COUNT] [-s SOURCE] [-g] [-d] input\n\npositional arguments:\n  input                 Path to directory containing input data.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CLUSTER_COUNT, --cluster_count CLUSTER_COUNT\n                        Groups data in the given number of clusters. If not provided, the cluster count is determined automatically using the Elbow method.\n  -s SOURCE, --source SOURCE\n                        Sets the cluster source.\n  -g, --plot_changes    If set, plots changes on clustered citation counts. By default the changes are not plotted.\n  -d, --plot_density    If set, plots probability instead of absolute values. Default is False.\n")))}u.isMDXComponent=!0},83:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),u=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(i,".").concat(d)]||p[d]||b[d]||a;return n?o.a.createElement(m,s(s({ref:t},l),{},{components:n})):o.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);